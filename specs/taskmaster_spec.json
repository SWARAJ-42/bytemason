{
  "name": "TaskMaster",
  "description": "A task management application enabling users to manage tasks with real-time updates.",
  "features": [
    "User authentication to associate tasks with users",
    "Create, read, update, delete (CRUD) functionality for tasks",
    "Due dates and reminders for tasks",
    "Task categorization and tagging",
    "Real-time updates to reflect changes to tasks immediately",
    "Responsive design for mobile and desktop usage",
    "User profiles and preferences settings"
  ],
  "structure": {
    "pages": [
      {
        "path": "/",
        "description": "Home page showing a dashboard of tasks.",
        "api_routes": [
          "/api/tasks",
          "/api/tags"
        ],
        "components": [
          "TaskList",
          "TaskItem",
          "AddTaskForm",
          "Navbar",
          "Footer"
        ]
      },
      {
        "path": "/profile",
        "description": "User profile page showing user information and preferences.",
        "api_routes": [
          "/api/user"
        ],
        "components": [
          "UserProfileForm",
          "Navbar",
          "Footer"
        ]
      },
      {
        "path": "/task/[id]",
        "description": "Detailed view of a single task with options to edit and delete.",
        "api_routes": [
          "/api/tasks/[id]"
        ],
        "components": [
          "TaskDetail",
          "EditTaskForm",
          "Navbar",
          "Footer"
        ]
      }
    ],
    "components": [
      {
        "name": "TaskList",
        "description": "Displays a list of tasks with categories and tags.",
        "is_client": true
      },
      {
        "name": "TaskItem",
        "description": "Represents a single task item in the list.",
        "is_client": true
      },
      {
        "name": "AddTaskForm",
        "description": "Form to add a new task.",
        "is_client": true
      },
      {
        "name": "Navbar",
        "description": "Navigation bar for the application.",
        "is_client": true
      },
      {
        "name": "Footer",
        "description": "Footer for the application layout.",
        "is_client": true
      },
      {
        "name": "UserProfileForm",
        "description": "Form to display and edit user profile and preferences.",
        "is_client": true
      },
      {
        "name": "TaskDetail",
        "description": "Displays detail of a single task including description, due date, and tags.",
        "is_client": true
      },
      {
        "name": "EditTaskForm",
        "description": "Form to edit existing task's details.",
        "is_client": true
      }
    ],
    "api_routes": [
      {
        "path": "/api/tasks",
        "method": "GET",
        "description": "Fetches a list of tasks for the authenticated user.",
        "query": "SUPABASE QUERY: SELECT * FROM tasks WHERE user_id = $user_id"
      },
      {
        "path": "/api/tasks",
        "method": "POST",
        "description": "Creates a new task.",
        "query": "SUPABASE QUERY: INSERT INTO tasks (title, description, due_date, user_id) VALUES ($title, $description, $due_date, $user_id)"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "GET",
        "description": "Fetches details of a single task identified by its ID.",
        "query": "SUPABASE QUERY: SELECT * FROM tasks WHERE id = $task_id AND user_id = $user_id"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "PUT",
        "description": "Updates details of a task identified by its ID.",
        "query": "SUPABASE QUERY: UPDATE tasks SET title = $title, description = $description, due_date = $due_date WHERE id = $task_id AND user_id = $user_id"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "DELETE",
        "description": "Deletes a task identified by its ID.",
        "query": "SUPABASE QUERY: DELETE FROM tasks WHERE id = $task_id AND user_id = $user_id"
      },
      {
        "path": "/api/tags",
        "method": "GET",
        "description": "Fetches tags for categorizing tasks.",
        "query": "SUPABASE QUERY: SELECT * FROM tags WHERE user_id = $user_id"
      },
      {
        "path": "/api/user",
        "method": "GET",
        "description": "Fetch the authenticated user's profile data.",
        "query": "SUPABASE QUERY: SELECT * FROM users WHERE id = $user_id"
      }
    ],
    "database": [
      {
        "name": "users",
        "schema": "CREATE TABLE users (id UUID PRIMARY KEY, email TEXT UNIQUE NOT NULL, password TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);"
      },
      {
        "name": "tasks",
        "schema": "CREATE TABLE tasks (id UUID PRIMARY KEY, title TEXT NOT NULL, description TEXT, due_date DATE, category_id UUID, user_id UUID REFERENCES users(id), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);"
      },
      {
        "name": "tags",
        "schema": "CREATE TABLE tags (id UUID PRIMARY KEY, name TEXT NOT NULL, user_id UUID REFERENCES users(id));"
      }
    ]
  }
}