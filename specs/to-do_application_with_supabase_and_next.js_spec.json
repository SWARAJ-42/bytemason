{
  "name": "To-Do Application with Supabase and Next.js",
  "description": "A to-do list application with user authentication, enabling CRUD operations for to-do items under different projects or categories.",
  "features": [
    "User authentication using Supabase Auth for secure access",
    "CRUD operations for to-do items: create, read, update, delete",
    "Ability to mark to-do items as completed",
    "Support for organizing tasks under projects or categories",
    "User authentication and security: email/password sign-up, third-party logins (optional)",
    "Data model for storing user information, to-do items, and optional projects or categories",
    "API endpoint for user authentication and handling sessions",
    "API endpoints for managing to-do items, including fetching, updating, and deleting",
    "Optional sharing of to-do lists with other users or exporting lists"
  ],
  "structure": {
    "pages": [
      {
        "path": "/",
        "description": "Home page where users can see an overview of their tasks and projects.",
        "api_routes": [
          "/api/auth/session",
          "/api/todos"
        ],
        "components": [
          "Navbar",
          "ToDoList",
          "ProjectList",
          "LoginModal",
          "SignUpModal"
        ]
      },
      {
        "path": "/profile",
        "description": "User profile page for managing personal information and settings.",
        "api_routes": [
          "/api/auth/user",
          "/api/auth/update"
        ],
        "components": [
          "Navbar",
          "UserProfile",
          "Settings"
        ]
      },
      {
        "path": "/project/[id]",
        "description": "Page displaying tasks within a specific project or category.",
        "api_routes": [
          "/api/todos?project_id={id}"
        ],
        "components": [
          "Navbar",
          "ProjectDetail",
          "ToDoList"
        ]
      },
      {
        "path": "/dashboard",
        "description": "Main dashboard for managing all tasks and projects.",
        "api_routes": [
          "/api/todos",
          "/api/projects"
        ],
        "components": [
          "Navbar",
          "ToDoList",
          "ProjectList",
          "TaskInputForm"
        ]
      }
    ],
    "components": [
      {
        "name": "Navbar",
        "description": "Navigation bar for page switching and user actions.",
        "is_client": true
      },
      {
        "name": "ToDoList",
        "description": "Displays a list of to-do items.",
        "is_client": true
      },
      {
        "name": "ProjectList",
        "description": "Displays a list of projects or categories.",
        "is_client": true
      },
      {
        "name": "LoginModal",
        "description": "Modal popup for user login.",
        "is_client": true
      },
      {
        "name": "SignUpModal",
        "description": "Modal popup for user registration.",
        "is_client": true
      },
      {
        "name": "UserProfile",
        "description": "Shows user information.",
        "is_client": true
      },
      {
        "name": "Settings",
        "description": "User settings for account and security.",
        "is_client": true
      },
      {
        "name": "ProjectDetail",
        "description": "Displays details for a specific project.",
        "is_client": true
      },
      {
        "name": "TaskInputForm",
        "description": "Form for entering and editing to-dos.",
        "is_client": true
      }
    ],
    "api_routes": [
      {
        "path": "/api/auth/session",
        "method": "GET",
        "description": "Check current user session.",
        "query": "select * from sessions where active = true"
      },
      {
        "path": "/api/auth/user",
        "method": "GET",
        "description": "Fetch current user information.",
        "query": "select id, email, created_at from users where id = 'current_user_id'"
      },
      {
        "path": "/api/auth/update",
        "method": "PUT",
        "description": "Update user profile information.",
        "query": "update users set name = 'new_name' where id = 'current_user_id'"
      },
      {
        "path": "/api/todos",
        "method": "GET",
        "description": "Fetch all to-do items for the user.",
        "query": "select * from todos where user_id = 'current_user_id'"
      },
      {
        "path": "/api/todos",
        "method": "POST",
        "description": "Create a new to-do item.",
        "query": "insert into todos (user_id, title, description, completed, project_id) values ('current_user_id', 'title', 'description', false, 'project_id')"
      },
      {
        "path": "/api/todos",
        "method": "PUT",
        "description": "Update a to-do item by id.",
        "query": "update todos set title = 'new_title', description = 'new_description', completed = 'new_completion_status' where id = 'todo_id'"
      },
      {
        "path": "/api/todos",
        "method": "DELETE",
        "description": "Delete a to-do item by id.",
        "query": "delete from todos where id = 'todo_id'"
      },
      {
        "path": "/api/projects",
        "method": "GET",
        "description": "Fetch all projects for the user.",
        "query": "select * from projects where user_id = 'current_user_id'"
      },
      {
        "path": "/api/projects",
        "method": "POST",
        "description": "Create a new project or category.",
        "query": "insert into projects (user_id, name) values ('current_user_id', 'project_name')"
      },
      {
        "path": "/api/projects",
        "method": "PUT",
        "description": "Update a project by id.",
        "query": "update projects set name = 'new_name' where id = 'project_id'"
      },
      {
        "path": "/api/projects",
        "method": "DELETE",
        "description": "Delete a project by id.",
        "query": "delete from projects where id = 'project_id'"
      }
    ],
    "database": [
      {
        "name": "users",
        "schema": "CREATE TABLE users (id UUID PRIMARY KEY, email VARCHAR(255) UNIQUE, password VARCHAR(255), created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP);"
      },
      {
        "name": "sessions",
        "schema": "CREATE TABLE sessions (id UUID PRIMARY KEY, user_id UUID REFERENCES users(id), active BOOLEAN DEFAULT true, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP);"
      },
      {
        "name": "todos",
        "schema": "CREATE TABLE todos (id UUID PRIMARY KEY, user_id UUID REFERENCES users(id), title VARCHAR(255), description TEXT, completed BOOLEAN DEFAULT false, project_id UUID REFERENCES projects(id), created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP);"
      },
      {
        "name": "projects",
        "schema": "CREATE TABLE projects (id UUID PRIMARY KEY, user_id UUID REFERENCES users(id), name VARCHAR(255), created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP);"
      }
    ]
  }
}