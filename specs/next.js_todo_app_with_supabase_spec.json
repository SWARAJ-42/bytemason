{
  "name": "Next.js Todo App with Supabase",
  "description": "A task management application allowing users to register, manage, and track their to-do items with real-time updates and secure authentication.",
  "features": [
    "User registration and login",
    "Add, edit, and delete to-dos",
    "Mark to-dos as completed",
    "Categorize or tag to-dos",
    "Set due dates for tasks",
    "User authentication with email/password or OAuth",
    "Secure data storage and retrieval with role-based permissions",
    "CRUD operations for to-do items",
    "Real-time updates for task list",
    "API endpoints for managing to-do items and user profiles"
  ],
  "structure": {
    "pages": [
      {
        "path": "/register",
        "description": "User registration page",
        "api_routes": [
          "/api/auth/register"
        ],
        "components": [
          "AuthForm"
        ]
      },
      {
        "path": "/login",
        "description": "User login page",
        "api_routes": [
          "/api/auth/login"
        ],
        "components": [
          "AuthForm"
        ]
      },
      {
        "path": "/dashboard",
        "description": "User dashboard displaying a list of to-dos",
        "api_routes": [
          "/api/todos",
          "/api/categories"
        ],
        "components": [
          "TodoList",
          "AddTodoForm",
          "CategoryFilter"
        ]
      },
      {
        "path": "/profile",
        "description": "User profile management page",
        "api_routes": [
          "/api/user"
        ],
        "components": [
          "UserProfile"
        ]
      }
    ],
    "components": [
      {
        "name": "AuthForm",
        "description": "Handles user input for registration and login",
        "is_client": true
      },
      {
        "name": "TodoList",
        "description": "Displays the list of to-dos with options to edit or delete",
        "is_client": true
      },
      {
        "name": "AddTodoForm",
        "description": "Form to add new to-do items",
        "is_client": true
      },
      {
        "name": "CategoryFilter",
        "description": "Filters to-dos by categories",
        "is_client": true
      },
      {
        "name": "UserProfile",
        "description": "Displays and updates user profile information",
        "is_client": true
      }
    ],
    "api_routes": [
      {
        "path": "/api/auth/register",
        "method": "POST",
        "description": "Registers a new user account",
        "query": "INSERT INTO users (name, email, password) VALUES ($1, $2, $3)"
      },
      {
        "path": "/api/auth/login",
        "method": "POST",
        "description": "Authenticates user and returns session token",
        "query": "SELECT * FROM users WHERE email = $1 AND password = $2"
      },
      {
        "path": "/api/todos",
        "method": "GET",
        "description": "Retrieves all to-dos for the authenticated user",
        "query": "SELECT * FROM todos WHERE user_id = $1"
      },
      {
        "path": "/api/todos",
        "method": "POST",
        "description": "Adds a new to-do item for the authenticated user",
        "query": "INSERT INTO todos (title, description, user_id, due_date, category_id) VALUES ($1, $2, $3, $4, $5)"
      },
      {
        "path": "/api/todos",
        "method": "PUT",
        "description": "Updates a to-do item",
        "query": "UPDATE todos SET title = $1, description = $2, completed = $3, due_date = $4, category_id = $5 WHERE id = $6 AND user_id = $7"
      },
      {
        "path": "/api/todos",
        "method": "DELETE",
        "description": "Deletes a to-do item",
        "query": "DELETE FROM todos WHERE id = $1 AND user_id = $2"
      },
      {
        "path": "/api/categories",
        "method": "GET",
        "description": "Retrieves all categories for the authenticated user",
        "query": "SELECT * FROM categories WHERE user_id = $1"
      },
      {
        "path": "/api/user",
        "method": "GET",
        "description": "Retrieves user profile information",
        "query": "SELECT * FROM users WHERE id = $1"
      },
      {
        "path": "/api/user",
        "method": "PUT",
        "description": "Updates user profile information",
        "query": "UPDATE users SET name = $1, email = $2 WHERE id = $3"
      }
    ],
    "database": [
      {
        "name": "users",
        "schema": "CREATE TABLE users (id SERIAL PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE NOT NULL, password TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);"
      },
      {
        "name": "todos",
        "schema": "CREATE TABLE todos (id SERIAL PRIMARY KEY, title TEXT NOT NULL, description TEXT, completed BOOLEAN DEFAULT FALSE, due_date TIMESTAMP, user_id INT REFERENCES users(id) ON DELETE CASCADE, category_id INT REFERENCES categories(id) ON DELETE SET NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);"
      },
      {
        "name": "categories",
        "schema": "CREATE TABLE categories (id SERIAL PRIMARY KEY, name TEXT NOT NULL, user_id INT REFERENCES users(id) ON DELETE CASCADE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);"
      }
    ]
  }
}