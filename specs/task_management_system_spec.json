{
  "name": "Task Management System",
  "description": "A task management application that allows users to manage their tasks efficiently while ensuring data privacy and secure access.",
  "features": [
    "Core functionality to create, read, update, and delete tasks",
    "User authentication with Supabase Auth to manage user sessions and data privacy",
    "Authorization features to ensure users can only access their tasks",
    "Data model for tasks with attributes like title, description, completed status, and due date",
    "Data model for users to manage user accounts and link tasks to specific users",
    "API endpoints to handle CRUD operations for tasks",
    "API endpoint for user registration and login"
  ],
  "structure": {
    "pages": [
      {
        "path": "/login",
        "description": "User login page",
        "api_routes": [
          "/api/auth/login"
        ],
        "components": [
          "LoginForm"
        ]
      },
      {
        "path": "/register",
        "description": "User registration page",
        "api_routes": [
          "/api/auth/register"
        ],
        "components": [
          "RegisterForm"
        ]
      },
      {
        "path": "/dashboard",
        "description": "Dashboard displaying user's tasks",
        "api_routes": [
          "/api/tasks"
        ],
        "components": [
          "TaskList",
          "TaskForm"
        ]
      },
      {
        "path": "/task/[id]",
        "description": "Page to view or edit a specific task",
        "api_routes": [
          "/api/tasks/[id]"
        ],
        "components": [
          "TaskDetails",
          "TaskForm"
        ]
      }
    ],
    "components": [
      {
        "name": "LoginForm",
        "description": "Form for user login",
        "is_client": true
      },
      {
        "name": "RegisterForm",
        "description": "Form for user registration",
        "is_client": true
      },
      {
        "name": "TaskList",
        "description": "Component to display a list of tasks",
        "is_client": false
      },
      {
        "name": "TaskForm",
        "description": "Form to create or edit a task",
        "is_client": true
      },
      {
        "name": "TaskDetails",
        "description": "Component to display details of a single task",
        "is_client": false
      }
    ],
    "api_routes": [
      {
        "path": "/api/auth/register",
        "method": "POST",
        "description": "Register a new user",
        "query": "INSERT INTO users (email, password) VALUES ($1, $2)"
      },
      {
        "path": "/api/auth/login",
        "method": "POST",
        "description": "Login user and start session",
        "query": "SELECT * FROM users WHERE email = $1 AND password = $2"
      },
      {
        "path": "/api/tasks",
        "method": "GET",
        "description": "Get all tasks for the authenticated user",
        "query": "SELECT * FROM tasks WHERE user_id = $1"
      },
      {
        "path": "/api/tasks",
        "method": "POST",
        "description": "Create a new task for the authenticated user",
        "query": "INSERT INTO tasks (user_id, title, description, completed, due_date) VALUES ($1, $2, $3, $4, $5)"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "GET",
        "description": "Get a specific task by ID for the authenticated user",
        "query": "SELECT * FROM tasks WHERE id = $1 AND user_id = $2"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "PUT",
        "description": "Update a task by ID for the authenticated user",
        "query": "UPDATE tasks SET title = $2, description = $3, completed = $4, due_date = $5 WHERE id = $1 AND user_id = $6"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "DELETE",
        "description": "Delete a task by ID for the authenticated user",
        "query": "DELETE FROM tasks WHERE id = $1 AND user_id = $2"
      }
    ],
    "database": [
      {
        "name": "users",
        "schema": "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)"
      },
      {
        "name": "tasks",
        "schema": "CREATE TABLE tasks (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER REFERENCES users(id),\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    completed BOOLEAN DEFAULT FALSE,\n    due_date DATE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)"
      }
    ]
  }
}